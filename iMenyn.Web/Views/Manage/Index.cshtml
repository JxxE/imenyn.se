@using iMenyn.Data.ViewModels
@model EnterpriseViewModel

@{
    ViewBag.Title = "Bidra med en meny";
    ViewBag.IsEdit = true;
}

<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=places"></script>
<script src="http://ajax.aspnetcdn.com/ajax/jquery.validate/1.12.0/jquery.validate.min.js"></script>

<style>
    #map {
        height: 280px;
        width: 100%;
        position: relative;
    }
</style>

<div id="create-enterprise-container" class="@(Model.ShowForm ? "show-form" : "")">
    <div id="confirm-content">
        <h3>Skapa meny</h3>
        <p>Här kan du skapa en meny till en resturang. Innan den publiceras kommer den att godkännas.</p>
        <br />
        <a id="confirm" href="javascript:void(0)" class="btn btn-success btn-lg">Jag förstår<span class="glyphicon glyphicon-ok"></span></a>
    </div>

    <div id="form-content">
        <h3 class="grey"><span class="glyphicon glyphicon-info-sign mr5"></span>Restaurang</h3>
        @RenderPage("_AddEnterpriseForm.cshtml",Model)
    </div>

</div>
<script>
    function putMyLocationOnMap() {
        iMenyn.Utilities.MyLocation(function (data) {
            var lat, lng;
            if (data) {
                //My location
                lat = data.latitude;
                lng = data.longitude;
            }
            else {
                //Stockholm
                lat = '59.332362';
                lng = '18.065109';
            }
            setMap(lat, lng);
        });
    }

    var componentForm = {
        street_number: 'StreetNumber', // Gatunummer: 2A
        route: 'StreetRoute', // Gata: Ringvägen
        administrative_area_level_1: 'County', // Län: Stockholms län, Södermanlands län
        administrative_area_level_2: 'Commune', // Kommun: Botkyrka, Strängnäs
        country: 'CountryCode', // Land: SE
        postal_code: 'PostalCode', // Postnummer: 14770
        postal_town: 'PostalTown', // Postort: Mariefred, Grödinge, Stockholm,
        sublocality: 'SubLocality' // Osäker. Södermalm är en iaf.        
    };

    function initialize() {
        var locationSearchBox = (document.getElementById('address-search'));
        var autocomplete = new google.maps.places.Autocomplete(locationSearchBox);
        autocomplete.setComponentRestrictions({ "country": "se" });
        autocomplete.setTypes(['geocode']);

        google.maps.event.addListener(autocomplete, 'place_changed', function () {

            //Töm alla textboxar
            clearAllBoxes();

            var place = autocomplete.getPlace();

            getAddressComponents(place);

            //Visa karta
            setMap(place.geometry.location.k, place.geometry.location.A);
        });

    }

    $("#confirm").click(function () {
        HideConfirmation(true);
    });

    function HideConfirmation(show) {
        if(show) {
            $("#create-enterprise-container > #confirm-content").hide();
            $("#create-enterprise-container > #form-content").show();
        }
    }

    function getAddressComponents(place) {
        for (var i = 0; i < place.address_components.length; i++) {
            var addressType = place.address_components[i].types[0];
            if (componentForm[addressType]) {
                var val = place.address_components[i]['short_name'];
                if (addressType === 'administrative_area_level_1')
                    val = val.replace(" County", "");// Ta bort "County" från resultatet
                document.getElementById(componentForm[addressType]).value = val;
            }
        }

        //Lägg ut koordinaterna i dolda textboxarna
        document.getElementById('Coordinates_Lat').value = place.geometry.location.k;
        document.getElementById('Coordinates_Lng').value = place.geometry.location.A;

    }

    var mapMarker;
    function setMap(lat, lng) {
        //Ta bort klassen "hide"
        $("#location-details").show();

        var lngLat = new google.maps.LatLng(lat, lng);
        var mapOptions = {
            zoom: 13,
            center: lngLat
        };

        var map = new google.maps.Map(document.getElementById('map'), mapOptions);

        mapMarker = new google.maps.Marker({
            position: lngLat,
            map: map,
            draggable: true,
            animation: google.maps.Animation.DROP
        });
        mapMarker.setMap(map);
        var asd = mapMarker.getPosition();
        geocodePosition(asd.k, asd.A);

        google.maps.event.addListener(mapMarker, 'dragend', function () {
            var pos = mapMarker.getPosition();
            geocodePosition(pos.k, pos.A);
        });

    }

    function geocodePosition(lat, lng) {
        var geocoder = new google.maps.Geocoder();

        geocoder.geocode
        ({
            latLng: new google.maps.LatLng(lat, lng)
        },
            function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    getAddressComponents(results[0]);
                }
                else {

                }
            }
        );
    }

    function clearAllBoxes() {
        for (var input in componentForm) {
            document.getElementById(componentForm[input]).value = "";
        }
    }
    google.maps.event.addDomListener(window, 'load', initialize);
</script>
@using iMenyn.Data.Helpers
@model iMenyn.Web.ViewModels.EnterpriseViewModel

@{
    ViewBag.Title = "Bidra med en meny";
    var categories = GeneralHelper.GetCategories();
}
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=places"></script>
<style>
    #map {
        height: 280px;
        width: 100%;
        position: relative;
    }
</style>
<h3>Skapa meny</h3>
<p>Här kan du skapa en meny till en resturang. Innan den publiceras kommer den att godkännas av oss.</p>

<div id="step-1">
    <h3 class="grey"><span class="glyphicon glyphicon-info-sign"></span>Om restaurangen</h3>
    @using (Html.BeginForm("Index", "Manage", FormMethod.Post, new { @class = "form-horizontal", id = "enterprise-form" }))
    {
        <div class="form-group">
            @Html.LabelFor(m => m.Name, "Namn", new { @class = "col-sm-2 control-label" })
            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Phone, "Telefon", new { @class = "col-sm-2 control-label" })
            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.Phone, new { @class = "form-control" })
            </div>
        </div>
    
        <div class="form-group">
            <label class="col-sm-2 control-label">Typ</label>
            <div class="col-sm-4">
                <select id="category-chooser" class="form-control">
                    <option></option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Value">@category.Text</option>    
                    }
                </select>
                <div id="chosen-categories" class="form-inline marginB20">
                    @*@if (Model.ChosenCategories != null)
                {
                    foreach (var category in Model.ChosenCategories)
                    {
                    <div class="tag">@category.Text
                         @Html.HiddenFor(m=>m.ChosenCategories, new{category.Value})
                        <span class='glyphicon glyphicon-remove'></span>
                    </div>
                    }
                }*@
                    @if (Model.ChosenCategories != null){
                        for (var i = 0; i < Model.ChosenCategories.Count; i++)
                        {
                        <div class="tag">@Model.ChosenCategories[i].Text
                            @Html.HiddenFor(m => m.ChosenCategories[i].Value)
                            <span class='glyphicon glyphicon-remove'></span>
                        </div>
                        }
                    }
                </div>
            </div>
        </div>
    
    
    
        <hr />
        <h3 class="grey"><span class="glyphicon glyphicon-map-marker"></span>Plats</h3>
        <div class="form-group">
            <label for="address-search" class="col-sm-2 control-label">Sök</label>
            <div class="col-sm-4">
                <input type="text" name="address-search" id="address-search" placeholder="Adress" class="form-control">
            </div>
        </div>
    
        <div id="location-details" class="well @(string.IsNullOrEmpty(Model.Name) ? "hide" : "")">
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        @* Gatuadress *@
                        @Html.LabelFor(m => m.StreetRoute, "Gatuadress", new { @class = "col-sm-4 control-label" })
                        <div class="col-sm-8">
                            @Html.TextBoxFor(m => m.StreetRoute, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @* Gatunummer  *@
                        @Html.LabelFor(m => m.StreetNumber, "Gatunummer ", new { @class = "col-sm-4 control-label" })
                        <div class="col-sm-8">
                            @Html.TextBoxFor(m => m.StreetNumber, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @* Postnummer  *@
                        @Html.LabelFor(m => m.PostalCode, "Postnummer ", new { @class = "col-sm-4 control-label" })
                        <div class="col-sm-8">
                            @Html.TextBoxFor(m => m.PostalCode, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @* Postort  *@
                        @Html.LabelFor(m => m.PostalTown, "Postort ", new { @class = "col-sm-4 control-label" })
                        <div class="col-sm-8">
                            @Html.TextBoxFor(m => m.PostalTown, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @* Kommun  *@
                        @Html.LabelFor(m => m.Commune, "Kommun ", new { @class = "col-sm-4 control-label" })
                        <div class="col-sm-8">
                            @Html.TextBoxFor(m => m.Commune, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @* Län  *@
                        @Html.LabelFor(m => m.County, "Län ", new { @class = "col-sm-4 control-label" })
                        <div class="col-sm-8">
                            @Html.TextBoxFor(m => m.County, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                @Html.TextBoxFor(m => m.Nope, new { @class = "hide" })
                @Html.HiddenFor(m => m.CountryCode)
                @Html.HiddenFor(m => m.SubLocality)
                @Html.HiddenFor(m => m.Coordinates.Lat)
                @Html.HiddenFor(m => m.Coordinates.Lng)
                @Html.HiddenFor(m => m.EditKey)

                <div class="col-sm-6">
                    <div id="map"></div>
                </div>
            </div>

        </div>
    
    }
</div>

<div id="step-2" class="hide">
    <h1>step 2</h1>
</div>


<div id="step">
    <a id="next-step" href="javascript:void(0)" class="btn btn-success">Nästa steg <span class="glyphicon glyphicon-chevron-right"></span></a>
</div>

<small>(En administratör kommer att godkänna din meny innan den publiceras)</small>
@Html.ValidationSummary()

<div id="yelp-results"></div>


<script>
    $(document).ready(function () {
        if (window.location.hash) {
            iMenyn.Utilities.ShowStep(window.location.hash.replace("#", ""));
        }
    });
    //Initiate category chooser
    iMenyn.Utilities.InitCategoryChooser();

    $("#next-step").click(function () {
        var enterpriseForm = $("#enterprise-form").serialize();
        iMenyn.Ajax.CreateTempEnterprise(enterpriseForm);
    });

    var componentForm = {
        street_number: 'StreetNumber', // Gatunummer: 2A
        route: 'StreetRoute', // Gata: Ringvägen
        //locality: 'long_name',// ?
        administrative_area_level_1: 'County', // Län: Stockholms län, Södermanlands län
        administrative_area_level_2: 'Commune', // Kommun: Botkyrka, Strängnäs
        country: 'CountryCode', // Land: SE
        postal_code: 'PostalCode', // Postnummer: 14770
        postal_town: 'PostalTown', // Postort: Mariefred, Grödinge, Stockholm,
        sublocality: 'SubLocality' // Osäker. Södermalm är en iaf.        
    };

    function initialize() {
        var locationSearchBox = (document.getElementById('address-search'));
        var autocomplete = new google.maps.places.Autocomplete(locationSearchBox);
        autocomplete.setComponentRestrictions({ "country": "se" });
        autocomplete.setTypes(['geocode']);

        google.maps.event.addListener(autocomplete, 'place_changed', function () {

            //Töm alla textboxar
            clearAllBoxes();

            //Ta bort klassen "hide"
            document.getElementById('location-details').className = "well";

            var place = autocomplete.getPlace();
            console.log(place)
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i]['short_name'];
                    if (addressType === 'administrative_area_level_1')
                        val = val.replace(" County", "");// Ta bort "County" från resultatet
                    document.getElementById(componentForm[addressType]).value = val;
                }
            }

            var coordinates = {
                lat: place.geometry.location.A,
                lng: place.geometry.location.k
            };

            //Lägg ut koordinaterna o dolda textboxarna
            document.getElementById('Coordinates_Lat').value = coordinates.lat;
            document.getElementById('Coordinates_Lng').value = coordinates.lng;

            //Visa karta
            setMap(coordinates);

        });

    }

    function setMap(coordinates) {
        var lngLat = new google.maps.LatLng(coordinates.lng, coordinates.lat);
        var mapOptions = {
            zoom: 13,
            center: lngLat
        };

        var map = new google.maps.Map(document.getElementById('map'), mapOptions);

        var marker = new google.maps.Marker({
            position: lngLat,
            map: map
        });
        marker.setMap(map);
    }

    function clearAllBoxes() {
        for (var input in componentForm) {
            //document.getElementById(input).value = "";
        }

    }


    google.maps.event.addDomListener(window, 'load', initialize);



    //function get_location() {

    //    if (navigator.geolocation) {
    //        navigator.geolocation.getCurrentPosition(getPosition, showError);
    //    }
    //    else { console.log("Geolocation is not supported by this browser."); }
    //}

    //function getPosition(pos) {
    //    console.log(pos);

    //}
    //function showError(error) {
    //    switch (error.code) {
    //    case error.PERMISSION_DENIED:
    //        console.log("User denied the request for Geolocation.");
    //        break;
    //    case error.POSITION_UNAVAILABLE:
    //        console.log("Location information is unavailable.");
    //        break;
    //    case error.TIMEOUT:
    //        console.log("The request to get user location timed out.");
    //        break;
    //    case error.UNKNOWN_ERROR:
    //        console.log("An unknown error occurred.");
    //        break;
    //    }
    //}
</script>


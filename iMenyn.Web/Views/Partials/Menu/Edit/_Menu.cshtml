@model iMenyn.Data.ViewModels.CompleteEnterpriseViewModel
<script src="//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/knockout/3.1.0/knockout-min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.11.1/jquery.validate.min.js"></script>
@if (Model.Enterprise != null)
{
    @Html.Partial("~/Views/Partials/_EnterpriseInfo.cshtml", Model.Enterprise)
}

<div class="row">
    <div class="col-sm-9">
        <div class="row">
            <div class="col-sm-12">
                <a class="dynamic-add btn btn-info" data-position="before" data-target="#categories" href="@Url.Action("BlankCategory", "Manage", new { enterpriseId = Model.Enterprise.Id })">Lägg till kategori<span class="glyphicon glyphicon glyphicon-plus"></span></a>
                <a href="javascript:void(0)" data-action="toggleclass" data-class="sorting-categories" class="btn btn-warning">Sortera kategorier<span class="glyphicon glyphicon-sort"></span></a>
            </div>
        </div>
        <div id="categories" class="edit">
            @foreach (var category in Model.ViewModelCategories)
            {
                @Html.Partial("~/Views/Partials/Menu/Edit/_Category.cshtml", category)
            }
            @if (Model.ViewModelCategories.Count == 0)
            {
                <script>
                    iMenyn.Utilities.DynamicAdd({ href: '@Url.Action("BlankCategory", "Manage", new { enterpriseId = Model.Enterprise.Id })', position: 'before', target: '#categories' })
                </script>
            }
        </div>
        @if (Model.DeletedProducts != null)
        {
            foreach (var deletedProduct in Model.DeletedProducts)
            {
            @Html.Partial("~/Views/Partials/Menu/Edit/_Product.cshtml", deletedProduct)
            }
        }
    </div>
    <div class="row">
        <div class="col-sm-10 col-sm-offset-1">
            <a id="save-menu-setup" href="javascript:void(0)" class="btn btn-success hide">Spara & avsluta<span class="glyphicon glyphicon-ok"></span></a>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        saveButtonVisibility();
    });
    $(document).on('click', '.product-price-edit .glyphicon', (function () {
        //Remove a product-price
        $(this).closest('.form-group').remove();
    }));

    $(document).on('click', '.dynamic-add', (function () {
        var $this = $(this);
        var position = $this.data('position');
        var maxOccurs = 0;
        var maxType = undefined;
        var maxParent = undefined;
        var target = $this.data('target');


        if ($this.data('max') != undefined) {
            maxOccurs = $this.data('max');
            maxParent = $(this).parent();
            maxType = 'div';
        }
        iMenyn.Utilities.DynamicAdd({ href: this.href, senderObj: $this, position: position, maxOccurs: maxOccurs, maxParent: maxParent, maxType: maxType, target: target});
        return false;
    }));

    $(document).on('click', '.toggle-edit', (function () {
        var $this = $(this);
        var editForm = $this.closest('.form-product');
        var editModeClass = 'edit-mode';

        //Hide all opened edit-forms
        $('.form-product.edit-mode').not(editForm).removeClass(editModeClass);

        //Toggle active classes
        editForm.toggleClass(editModeClass);
    }));

    $(document).on('click', 'a[data-remove]', (function () {
        var itemToDelete = $(this).data('remove');
        var editForm = $(this).closest('.' + itemToDelete);
        editForm.remove();
    }));

    $(".category").sortable({ items: "form", handle: ".glyphicon-resize-vertical", connectWith: ".category" });
    $("#main-container").sortable({ items: ".category", handle: ".glyphicon-resize-vertical" });

    $("#save-menu-setup").click(function () {
        var $categories = $(".category");
        var setup = new Object();
        setup.Categories = new Array();
        for (var i = 0; i < $categories.length; i++) {
            var $category = $($categories[i]);
            var category = new Object();
            category.id = $category.data('category');
            category.name = $category.find('.category-name').html();
            category.products = new Array();
            var products = $category.children().find('.product');
            for (var j = 0; j < products.length; j++) {
                var productId = $(products[j]).find("input[name='Id']").val();
                if (productId)
                    category.products.push(productId);
            }
            setup.Categories.push({ Id: category.id, Name: category.name, Products: category.products });
        }
        iMenyn.Ajax.SaveMenuSetup(JSON.stringify(setup), '@Model.Enterprise.Id');
    });



    var saveButtonIsVisible = false;
    function saveButtonVisibility() {
        saveButtonIsVisible = $(".form-product").length > 3;

        if (saveButtonIsVisible)
            $("#save-menu-setup").removeClass('hide');
    }

    function scrollToAnchor(aid) {
        $('html,body').animate({ scrollTop: $("#" + aid).offset().top }, 'slow');
    }



    $(document).on("submit", '.form-product', function (e) {
        e.preventDefault();
        var $this = $(this);
        iMenyn.Ajax.SaveProduct($this, function () {
            iMenyn.Utilities.DynamicAdd({ href: '@Url.Action("BlankProduct", "Manage", new { enterpriseId = Model.Enterprise.Id })', position: 'after', senderObj: $this });
            scrollToAnchor($this.attr('id'));
        });
        return false;
    });

@*    $(".form-productASDASD").validate({
        rules: {
            Name: {
                required: true,
            }
        },
        messages: {
            Name: {
                required: "Ange ett namn",
            }
        },
        submitHandler: function (form) {
            var $this = $(form);
            console.log("submithandler")
            updateProductDisplayValues($this);

            if (!saveButtonIsVisible)
                saveButtonVisibility();

            // var status = iMenyn.Ajax.SaveProduct($this.serialize());
            var status = "KOMMER INTE FUNGERA! AJAX ÄR ASYNC";
            /*Satus:
            10 = updated
            20 = new added
            30 = no added
            */
            
            if (status !== 30)
                $this.removeClass('edit-mode');
            if (status === 20) {
                //Add new form after this if it's a new product
                scrollToAnchor($this.attr('id'));
                var addedForm  = iMenyn.Utilities.DynamicAdd({ href: '@Url.Action("BlankProduct", "Manage", new { enterpriseId = Model.Enterprise.Id })', position: 'after', senderObj: $this });
                validationToNewProductForm(addedForm);
            }
        }
    });*@

    //function validationToNewProductForm(addedForm) {
    //    var form;
    //    $.each($(addedForm), function (index, value) {
    //        if($(this).is('form')) {
    //            form = $(this);
    //        }
    //    });
  
    //   $(form).validate();
    //    var nameInput = $(form).find('input[name="Name"]').first();
    //   /* VALIDERA ELEMENT!!!!!!!!!!!*/
    //    $('input[name="Name"]').rules("add", {
    //            required: true
    //        });
    //}
</script>

@model iMenyn.Data.ViewModels.CompleteEnterpriseViewModel
<script src="//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
@if (Model.Enterprise != null)
{
    @Html.Partial("~/Views/Partials/_EnterpriseInfo.cshtml", Model.Enterprise)
}

<div class="row">
    <div class="col-sm-9">
        <div id="toolbox-container">
            <div id="toolbox" class="row">
            <div class="col-sm-12">
                <a class="dynamic-add btn btn-info" data-target="#categories > .category:last-of-type" href="@Url.Action("BlankCategory", "Manage", new { enterpriseId = Model.Enterprise.Id })">Lägg till kategori<span class="glyphicon glyphicon glyphicon-plus ml"></span></a>
                <a href="javascript:void(0)" data-action="toggleclass" data-class="sorting-categories" class="btn btn-warning">Sortera kategorier<span class="glyphicon glyphicon-sort ml"></span></a>
                <a id="undo-last-action" class="hide mr5" href="javascript:void(0)">Ångra borttag</a>
            </div>
        </div>
        </div>
        <div id="categories" class="edit">
            @foreach (var category in Model.ViewModelCategories)
            {
                @Html.Partial("~/Views/Partials/Menu/Edit/_Category.cshtml", category)
            }
            @if (Model.ViewModelCategories.Count == 0)
            {
                <script>
                    iMenyn.Utilities.DynamicAdd({ href: '@Url.Action("BlankCategory", "Manage", new { enterpriseId = Model.Enterprise.Id })', position: 'before', target: '#categories' })
                </script>
            }
        </div>
        @if (Model.DeletedProducts != null)
        {
            foreach (var deletedProduct in Model.DeletedProducts)
            {
            @Html.Partial("~/Views/Partials/Menu/Edit/_Product.cshtml", deletedProduct)
            }
        }
    </div>
    <div class="row">
        <div class="col-sm-10 col-sm-offset-1">
            <a id="save-menu-setup" href="javascript:void(0)" class="btn btn-success btn-lg hide pull-right mt50">Spara & avsluta<span class="glyphicon glyphicon-ok ml"></span></a>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        saveButtonVisibility();

        var toolboxPositionFromTop = $("#toolbox").offset().top;
        $("#toolbox-container").height($("#toolbox").height());

        $(window).bind('scroll', function () {
            if ($(window).scrollTop() > toolboxPositionFromTop) {
                $('#toolbox').addClass('fixed');
            }
            else {
                $('#toolbox').removeClass('fixed');
            }
        });
    });
    $(document).on('click', '.product-price-edit .glyphicon', (function () {
        //Remove a product-price
        $(this).closest('.form-group').remove();
    }));

    $(document).on('click', '.dynamic-add', (function () {
        var $this = $(this);
        var position = $this.data('position');
        var maxOccurs = 0;
        var maxType = undefined;
        var maxParent = undefined;
        var target = $this.data('target');
        var doAdd = true;

        if ($this.data('max') != undefined) {
            maxOccurs = $this.data('max');
            maxParent = $(this).parent();
            maxType = 'div';
        }

        //If "add category"
        if (target.indexOf("#categories") >= 0) {
            var categories = $('.category');
            $.each(categories, function (index, value) {
                var productForm = $(value).find('.form-product');
                if (productForm.length === 0 || (productForm.length === 1 && productForm.first().hasClass('edit-mode'))) {
                    //Do not add another category if category has 0 products or 1 product with edit-mode active.
                    doAdd = false;
                }
            });
        }
        if (doAdd)
            iMenyn.Utilities.DynamicAdd({ href: this.href, senderObj: $this, position: position, maxOccurs: maxOccurs, maxParent: maxParent, maxType: maxType, target: target });
        return false;
    }));

    $(document).on('click', 'a[data-action="add-product"]', function (e) {
        var $this = $(this);
        addEmptyProduct($this);
    });

    function addEmptyProduct(button) {
        $.ajax({
            url: button.data('url'),
            cache: false,
            success: function (html) {
                var $form = $($.parseHTML(html)).last();

                iMenyn.Utilities.ToggleEditMode($form, 'all-but-this');

                //Append a new form
                button.closest('.category').find('.category-products').append(html);

                iMenyn.Utilities.ScrollToAnchor($form[0].id);
            },
            error: function () {
                console.log("error add product");
            }
        });
    }

    $(document).on('click', '.toggle-edit', (function () {
        var $this = $(this);
        var editForm = $this.closest('.form-product');

        iMenyn.Utilities.ToggleEditMode(editForm,'product');
    }));

    $(document).on("click", ".value-edit span.glyphicon-edit", function () {
        var container = $(this).closest('.value-edit');
        iMenyn.Utilities.ToggleEditMode(container, 'all-but-this');
    });
    $(document).on("click", ".value-edit span.glyphicon-remove", function () {
        var container = $(this).closest('.value-edit');
        container.removeClass('edit-mode');
    });
    $(document).on("submit", "form.value-edit", function (e) {
        e.preventDefault();
        var form = $(this);

        var input = form.find('input');
        var inputValue = input.val();

        //If input is not empty or whitespace
        if (inputValue.trim()) {
            var inputFor = input.data('for');
            form.find('[data-display-value=\"' + inputFor + '\"]').html(inputValue);
            form.removeClass('edit-mode');
            form.removeClass('no-init-value');
        }


        var categoryContainer = form.closest('.category');
        if (categoryContainer.find('.form-product').length === 0) {
            var addButton = categoryContainer.find('[data-action="add-product"]');
            addEmptyProduct(addButton);
        }

        return false;
    });

    function closeOrRemoveProductEditForm(editForm) {
        var firstPriceInput = editForm.find('.product-price-edit input[type="number"]');

        //If name-input is empty OR first price is 0 or empty
        if (!editForm.find('[name="Name"]').first().val().trim() || (firstPriceInput.val() == 0 || firstPriceInput.val() == "")) {
            //Remove product-form
            editForm.remove();
        }
        else {
            //Save
            editForm.submit();
        }
    }

    var lastDeletedItem;

    $("#undo-last-action").click(function() {
        lastDeletedItem.parent.prepend(lastDeletedItem.content.removeClass('edit-mode').removeAttr('style'));
        $(this).addClass('hide');
        lastDeletedItem = null;
    });

    $(document).on('click', 'a[data-remove]', (function () {
        var itemToDelete = $(this).data('remove');

        var classToDelete;
        var parent;
        var editForm;

        switch (itemToDelete) {
            case 'product':
                classToDelete = 'form-product';
                editForm = $(this).closest('.' + classToDelete);
                parent = editForm.closest('.category-products');
                break;
            default:
                classToDelete = 'category';
                editForm = $(this).closest('.' + classToDelete);
                parent = $('#categories');
                break;
        }
        
        lastDeletedItem = {
            content: editForm,
            parent:parent
        };

        showUndoButton();

        editForm.animate({height:0,opacity:0}, 500,function () {
            editForm.remove();
        });
    }));

    var timeOutId;
    function showUndoButton() {
        clearTimeout(timeOutId);
        $("#undo-last-action").removeClass('hide');
        timeOutId = setTimeout(function() {
            $("#undo-last-action").addClass('hide');
        }, 10000); 
    }

    $(".category-products").sortable({ items: "form", handle: ".product .glyphicon-resize-vertical", connectWith: ".category-products" });
    $("#main-container").sortable({ items: ".category", handle: ".glyphicon-resize-vertical.category-sorter" });

    $("#save-menu-setup").click(function () {
        var $this = $(this);
        var $categories = $(".category");
        var setup = new Object();
        setup.Categories = new Array();
        for (var i = 0; i < $categories.length; i++) {
            var $category = $($categories[i]);
            var category = new Object();
            category.id = $category[0].id;
            category.name = $category.find('[data-id="category-name"]').val();
            category.products = new Array();
            var products = $category.children().find('.product');
            for (var j = 0; j < products.length; j++) {
                var productId = $(products[j]).find("input[name='Id']").val();
                if (productId)
                    category.products.push(productId);
            }
            setup.Categories.push({ Id: category.id, Name: category.name, Products: category.products });
        }
        iMenyn.Ajax.SaveMenuSetup($this, JSON.stringify(setup), '@Model.Enterprise.Id');
    });

    var saveButtonIsVisible = false;
    function saveButtonVisibility() {
        saveButtonIsVisible = $(".form-product").length > 3;

        if (saveButtonIsVisible)
            $("#save-menu-setup").removeClass('hide');
    }


    $(document).on("submit", '.form-product', function (e) {
        e.preventDefault();
        var $this = $(this);
        iMenyn.Ajax.SaveProduct($this, function () {
            var addButton = $this.closest('.category').find('[data-action="add-product"]');
            addEmptyProduct(addButton);
            iMenyn.Utilities.ScrollToAnchor($this.attr('id'));
        });
        return false;
    });
    

</script>
